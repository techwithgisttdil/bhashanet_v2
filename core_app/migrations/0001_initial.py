# Generated by Django 5.0.4 on 2024-10-18 04:44

import core_app.validate
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Announcements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Announcement_Title', models.TextField(blank=True, null=True)),
                ('Announcement_Description', models.TextField(blank=True, null=True)),
                ('Announcement_Description1', models.TextField(blank=True, null=True)),
                ('Announcement_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Announcement_Image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Announcement/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Announcement_InternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('Announcement_ExternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('Announcement_CreatedDate', models.DateField(auto_now_add=True, null=True)),
                ('Announcement_UpdatedDate', models.DateField(auto_now=True, null=True)),
                ('Announcement_Author', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Announcements',
                'db_table': 'ANNOUNCEMENTS',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Article_Title', models.TextField()),
                ('Article_Alias', models.TextField()),
                ('Article_Title_Description', models.TextField()),
                ('Article_Title_icon', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Article/icon/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Title_Image1', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Article/icon/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Title_Image2', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Article/icon/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Upload_Doc1', models.FileField(blank=True, null=True, upload_to='core_app/Article/upload_doc/')),
                ('Article_Upload_Doc2', models.FileField(blank=True, null=True, upload_to='core_app/Article/upload_doc/')),
                ('Article_Upload_Doc3', models.FileField(blank=True, null=True, upload_to='core_app/Article/upload_doc/')),
                ('Article_Upload_Doc4', models.FileField(blank=True, null=True, upload_to='core_app/Article/upload_doc/')),
                ('Article_Upload_Doc5', models.FileField(blank=True, null=True, upload_to='core_app/Article/upload_doc/')),
                ('Article_Subtitle1', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Subtitle2', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Subtitle3', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Subtitle4', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Subtitle5', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Description1', models.TextField(blank=True, null=True)),
                ('Article_Description2', models.TextField(blank=True, null=True)),
                ('Article_Description3', models.TextField(blank=True, null=True)),
                ('Article_Description4', models.TextField(blank=True, null=True)),
                ('Article_Description5', models.TextField(blank=True, null=True)),
                ('Article_Internalink1', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Internalink2', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Internalink3', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Internalink4', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Internalink5', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Externalink1', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Externalink2', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Externalink3', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Externalink4', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Externalink5', models.CharField(blank=True, max_length=500, null=True)),
                ('Article_Image1', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Article/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Image2', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Article/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Image3', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Article/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Image4', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Article/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_Image5', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Article/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Article_video', models.FileField(blank=True, null=True, upload_to='core_app/Article/videos_uploaded/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])])),
                ('Article_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('Article_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('Article_CreatedDate', models.DateField(auto_now_add=True)),
                ('Article_UpdatedDate', models.DateField(auto_now=True)),
                ('Article_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Single Page Article ',
                'db_table': 'ARTICLE',
            },
        ),
        migrations.CreateModel(
            name='BestPractices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BestPractices_title', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_title_desc', models.TextField(blank=True, max_length=1000, null=True)),
                ('BestPractices_title_image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/best_practices/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('BestPractices_subtitle1', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_desc1', models.TextField(blank=True, max_length=1000, null=True)),
                ('BestPractices_image1', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/best_practices/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('BestPractices_internalURL1', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_externalURL1', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_subtitle2', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_desc2', models.TextField(blank=True, max_length=1000, null=True)),
                ('BestPractices_image2', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/best_practices/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('BestPractices_internalURL2', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_externalURL2', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_subtitle3', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_desc3', models.TextField(blank=True, max_length=1000, null=True)),
                ('BestPractices_image3', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/best_practices/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('BestPractices_internalURL3', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_externalURL3', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_subtitle4', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_desc4', models.TextField(blank=True, max_length=1000, null=True)),
                ('BestPractices_image4', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/best_practices/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('BestPractices_internalURL4', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_externalURL4', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_subtitle5', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_desc5', models.TextField(blank=True, max_length=1000, null=True)),
                ('BestPractices_image5', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/best_practices/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('BestPractices_internalURL5', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_externalURL5', models.CharField(blank=True, max_length=500, null=True)),
                ('BestPractices_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('BestPractices_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=30)),
                ('BestPractices_CreationDate', models.DateField(auto_now_add=True)),
                ('BestPractices_LastUpdateDate', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Best Practices',
                'db_table': 'BEST PRACTICES',
            },
        ),
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DocumentCategory_Name', models.CharField(max_length=500)),
                ('DocumentCategory_Status', models.BooleanField(default=False)),
                ('DocumentCategory_CreationDate', models.DateField(auto_now_add=True)),
                ('DocumentCategory_LastUpdatedDate', models.DateField(auto_now=True)),
                ('DocumentCategory_PublishedStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('DocumentCategory_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('DocumentCategory_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Document Category',
                'db_table': 'DOCUMENT_CATEGORY',
            },
        ),
        migrations.CreateModel(
            name='DocumentCategoryWithoutTrans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DocumentCategory_Name', models.CharField(max_length=500)),
                ('DocumentCategory_Status', models.BooleanField(default=False)),
                ('DocumentCategory_CreationDate', models.DateField(auto_now_add=True)),
                ('DocumentCategory_LastUpdatedDate', models.DateField(auto_now=True)),
                ('DocumentCategory_PublishedStatus', models.CharField(choices=[('Published', 'PUBLISHED'), ('Unpublished', 'UNPUBLISHED')], default='Unpublished', max_length=20)),
                ('DocumentCategory_Author', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name_plural': 'Document Category Without Translation',
                'ordering': ['DocumentCategory_Name'],
            },
        ),
        migrations.CreateModel(
            name='DomainSyntax',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Domain_Name', models.CharField(max_length=253)),
            ],
            options={
                'verbose_name_plural': 'DOMAIN SYNTAX',
                'db_table': 'DOMAIN SYNTAX',
            },
        ),
        migrations.CreateModel(
            name='EmailAddressInternationalization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('EmailAddressInternationalization_title', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_title_desc', models.TextField(blank=True, max_length=1000, null=True)),
                ('EmailAddressInternationalization_title_image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/EmailAddressInternationalization/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('EmailAddressInternationalization_subtitle1', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_desc1', models.TextField(blank=True, max_length=1000, null=True)),
                ('EmailAddressInternationalization_image1', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/EmailAddressInternationalization/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('EmailAddressInternationalization_internalURL1', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_externalURL1', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_subtitle2', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_desc2', models.TextField(blank=True, max_length=1000, null=True)),
                ('EmailAddressInternationalization_image2', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/EmailAddressInternationalization/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('EmailAddressInternationalization_internalURL2', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_externalURL2', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_subtitle3', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_desc3', models.TextField(blank=True, max_length=1000, null=True)),
                ('EmailAddressInternationalization_image3', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/EmailAddressInternationalization/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('EmailAddressInternationalization_internalURL3', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_externalURL3', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_subtitle4', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_desc4', models.TextField(blank=True, max_length=1000, null=True)),
                ('EmailAddressInternationalization_image4', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/EmailAddressInternationalization/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('EmailAddressInternationalization_internalURL4', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_externalURL4', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_subtitle5', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_desc5', models.TextField(blank=True, max_length=1000, null=True)),
                ('EmailAddressInternationalization_image5', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/EmailAddressInternationalization/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('EmailAddressInternationalization_internalURL5', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_externalURL5', models.CharField(blank=True, max_length=500, null=True)),
                ('EmailAddressInternationalization_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('EmailAddressInternationalization_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=30)),
                ('EmailAddressInternationalization_CreationDate', models.DateField(auto_now_add=True)),
                ('EmailAddressInternationalization_LastUpdateDate', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Email Address Internationalization',
                'db_table': 'EMAIL_ADDRESS_INTERNATIONALIZATION',
            },
        ),
        migrations.CreateModel(
            name='EmailSyntax',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Email_Address', models.CharField(max_length=350)),
            ],
            options={
                'verbose_name_plural': 'EMAIL SYNTAX',
                'db_table': 'EMAIL SYNTAX',
            },
        ),
        migrations.CreateModel(
            name='FaqCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FaqCategory_Name', models.CharField(max_length=300)),
                ('FaqCategory_CreationDate', models.DateField(auto_now_add=True)),
                ('FaqCategory_LastUpdateDate', models.DateField(auto_now=True, null=True)),
                ('FaqCategory_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('FaqCategory_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': "FAQ's Category",
                'db_table': 'FAQS_CATEGORY',
            },
        ),
        migrations.CreateModel(
            name='FeedbackCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FeedbackCategory_Name', models.CharField(max_length=300)),
                ('FeedbackCategory_CreationDate', models.DateField(auto_now_add=True)),
                ('FeedbackCategory_LastUpdateDate', models.DateField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Feedback Categories',
                'db_table': 'FeedbackCategory',
            },
        ),
        migrations.CreateModel(
            name='GalleryHeadings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Gallery_heading', models.CharField(max_length=500)),
                ('Gallery_heading_Creation_Date', models.DateField(auto_now_add=True)),
                ('Gallery_heading_Last_Updated_Date', models.DateField(auto_now=True)),
                ('Gallery_heading_Publish_Status', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Gallery Video Headings',
                'db_table': 'Gallery_Headings',
            },
        ),
        migrations.CreateModel(
            name='GenericList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GenericList_Category_Name', models.CharField(blank=True, max_length=500, null=True)),
                ('GenericList_Title_Name', models.TextField(blank=True, null=True)),
                ('GenericList_Title_Description', models.TextField(blank=True, null=True)),
                ('GenericList_Value1', models.TextField(blank=True, null=True)),
                ('GenericList_Value2', models.TextField(blank=True, null=True)),
                ('GenericList_Value3', models.TextField(blank=True, null=True)),
                ('GenericList_Value4', models.TextField(blank=True, null=True)),
                ('GenericList_Value5', models.TextField(blank=True, null=True)),
                ('GenericList_Value6', models.TextField(blank=True, null=True)),
                ('GenericList_Value7', models.TextField(blank=True, null=True)),
                ('GenericList_Value8', models.TextField(blank=True, null=True)),
                ('GenericList_Value9', models.TextField(blank=True, null=True)),
                ('GenericList_Value10', models.TextField(blank=True, null=True)),
                ('GenericList_CreationDate', models.DateField(auto_now_add=True)),
                ('GenericList_LastUpdatedDate', models.DateField(auto_now=True)),
                ('GenericList_PublishedStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('GenericList_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('GenericList_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Generic List',
                'db_table': 'GENERIC_LIST',
            },
        ),
        migrations.CreateModel(
            name='IDNccTLDs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDNccTLDs_Title', models.CharField(blank=True, max_length=500, null=True)),
                ('IDNccTLDs_Description', models.TextField(blank=True, null=True)),
                ('IDNccTLDs_Image1', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/IDNccTLDs/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('IDNccTLDs_Image2', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/IDNccTLDs/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('IDNccTLDs_Image3', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/IDNccTLDs/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('IDNccTLDs_Image4', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/IDNccTLDs/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('IDNLanguages_Subtitle1', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Description1', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Subtitle2', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Description2', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Subtitle3', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Description3', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Subtitle4', models.TextField(blank=True, null=True)),
                ('IDNLanguages_Description4', models.TextField(blank=True, null=True)),
                ('IDNLanguages_link1', models.CharField(blank=True, max_length=500, null=True)),
                ('IDNLanguages_link2', models.CharField(blank=True, max_length=500, null=True)),
                ('IDNLanguages_link3', models.CharField(blank=True, max_length=500, null=True)),
                ('IDNLanguages_link4', models.CharField(blank=True, max_length=500, null=True)),
                ('IDNccTLDs_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('IDNccTLDs_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('IDNccTLDs_CreatedDate', models.DateField(auto_now_add=True)),
                ('IDNccTLDs_UpdatedDate', models.DateField(auto_now=True)),
                ('IDNccTLDs_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'IDN Country Code TLD Page ',
                'db_table': 'IDNccTLDs',
            },
        ),
        migrations.CreateModel(
            name='IDNLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDNLanguages_IDN_Domain', models.CharField(blank=True, max_length=100, null=True)),
                ('IDNLanguages_Script', models.CharField(blank=True, max_length=100, null=True)),
                ('IDNLanguages_Policies_Document', models.FileField(blank=True, null=True, upload_to='core_app/Document/IDNLanguages_Policies_Document', validators=[django.core.validators.FileExtensionValidator(['pdf', 'zip', 'csv', 'xls', 'ppt', 'html'])])),
                ('Language_Supported', models.CharField(blank=True, max_length=300, null=True)),
                ('IDNLanguages_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('IDNLanguages_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('IDNLanguages_CreatedDate', models.DateField(auto_now_add=True)),
                ('IDNLanguages_UpdatedDate', models.DateField(auto_now=True)),
                ('IDNLanguages_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'List of IDN Languages',
                'db_table': 'IDN_LANGUAGES',
            },
        ),
        migrations.CreateModel(
            name='IDNReadyWebsitesCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDNReadyWebsites_Category_Name', models.CharField(max_length=100)),
                ('IDNReadyWebsites_Category_Creation_Date', models.DateField(auto_now_add=True)),
                ('IDNReadyWebsites_Category_Last_Updated_Date', models.DateField(auto_now=True)),
                ('IDNReadyWebsites_Category_Publish_Status', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'List of IDN Ready Websites Category',
                'db_table': 'IDN_WEBSITES_CATEGORY',
            },
        ),
        migrations.CreateModel(
            name='IDNReadyWebsitesLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDNReadyWebsites_Language_Name', models.CharField(max_length=100)),
                ('IDNReadyWebsites_Language_Creation_Date', models.DateField(auto_now_add=True)),
                ('IDNReadyWebsites_Language_Last_Updated_Date', models.DateField(auto_now=True)),
                ('IDNReadyWebsites_Language_Publish_Status', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'List of IDN Ready Websites Languages',
                'db_table': 'IDN_WEBSITES_LANGUAGES',
            },
        ),
        migrations.CreateModel(
            name='IDNRequestForUserWebsitesCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDN_category_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('website_status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=20)),
                ('IDN_category_creation_date', models.DateField(auto_now_add=True)),
                ('IDN_category_last_updated_date', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name': 'IDN Request For User Websites Categories',
                'verbose_name_plural': 'IDN Request For User Websites Categories',
            },
        ),
        migrations.CreateModel(
            name='LimitCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Email', models.CharField(max_length=300)),
                ('Generation_Time', models.DateField(auto_now=True)),
                ('Counter', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'verbose_name_plural': 'LimitCheck',
                'db_table': 'LimitCheck',
            },
        ),
        migrations.CreateModel(
            name='Objectives',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Objectives_Name', models.CharField(max_length=800)),
                ('Objectives_Description', models.TextField()),
                ('Objectives_CreationDate', models.DateField(auto_now_add=True)),
                ('Objectives_LastUpdatedDate', models.DateField(auto_now=True)),
                ('Objectives_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('Objectives_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('Objectives_PublishedStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Objectives_Slug', models.SlugField(blank=True, max_length=255, null=True)),
                ('Objectives_Thumbnail', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Objectives/Thumbnail', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
            ],
            options={
                'verbose_name_plural': 'Objectives',
                'db_table': 'OBJECTIVE',
            },
        ),
        migrations.CreateModel(
            name='OTP_For_IDNRequestForUserWebsites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('OTP_Email', models.CharField(blank=True, max_length=500, null=True)),
                ('OTP_Value', models.IntegerField()),
                ('OTP_Entered_Count', models.IntegerField()),
                ('OTP_Status', models.BooleanField(blank=True, default=False, null=True)),
                ('OTP_Created_Date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'OTP FOR IDN Request For User Websites',
                'verbose_name_plural': 'OTP FOR IDN Request For User Websites',
            },
        ),
        migrations.CreateModel(
            name='PrivacyPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PrivacyPolicy_title', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_title_desc', models.TextField(blank=True, max_length=2000, null=True)),
                ('PrivacyPolicy_subtitle1', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_desc1', models.TextField(blank=True, max_length=1000, null=True)),
                ('PrivacyPolicy_subtitle2', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_desc2', models.TextField(blank=True, max_length=1000, null=True)),
                ('PrivacyPolicy_subtitle3', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_desc3', models.TextField(blank=True, max_length=1000, null=True)),
                ('PrivacyPolicy_subtitle4', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_desc4', models.TextField(blank=True, max_length=1000, null=True)),
                ('PrivacyPolicy_subtitle5', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_desc5', models.TextField(blank=True, max_length=1000, null=True)),
                ('PrivacyPolicy_image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/privacy_policy/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('PrivacyPolicy_url', models.CharField(blank=True, max_length=500, null=True)),
                ('PrivacyPolicy_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('PrivacyPolicy_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=30)),
                ('PrivacyPolicy_CreationDate', models.DateField(auto_now_add=True)),
                ('PrivacyPolicy_LastUpdateDate', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Privacy Policies',
                'db_table': 'PRIVACY_POLICY',
            },
        ),
        migrations.CreateModel(
            name='SOPTechnologyCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SOPTechnologyCategory_Name', models.CharField(max_length=500)),
                ('SOPTechnologyCategory_Status', models.BooleanField(default=False)),
                ('SOPTechnologyCategory_CreationDate', models.DateField(auto_now_add=True)),
                ('SOPTechnologyCategory_LastUpdatedDate', models.DateField(auto_now=True)),
                ('SOPTechnologyCategory_PublishedStatus', models.CharField(choices=[('Published', 'PUBLISHED'), ('Unpublished', 'UNPUBLISHED')], default='Unpublished', max_length=20)),
                ('SOPTechnologyCategory_Author', models.CharField(blank=True, max_length=500, null=True)),
                ('SOPTechnologyCategory_Thumbnail', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/SOPTechnologyCategory/Thumbnail', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
            ],
            options={
                'verbose_name_plural': 'SOP Technology Category',
                'ordering': ['SOPTechnologyCategory_Name'],
            },
        ),
        migrations.CreateModel(
            name='Stackholder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Stackholder_image', models.FileField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Stackholder/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg', 'webp'])])),
                ('Stackholder_image_title', models.CharField(blank=True, max_length=500, null=True)),
                ('Stackholder_url', models.CharField(blank=True, max_length=500, null=True)),
                ('Stackholder_CreationDate', models.DateField(auto_now_add=True)),
                ('Stackholder_LastUpdatedDate', models.DateField(auto_now=True)),
                ('Stackholder_PublishedStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Stackholder_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('Stackholder_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Stackholders',
                'db_table': 'STACKHOLDER',
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Subscriber_Email', models.CharField(max_length=200)),
                ('Subscriber_Subscription_Status', models.CharField(choices=[('Subscribed', 'Subscribed'), ('Unsubscribed', 'Unsubscribed')], default='Subscribed', max_length=20)),
                ('Subscriber_Subscription_Date', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'List of Subscribers',
                'db_table': 'SUBSCRIBER',
            },
        ),
        migrations.CreateModel(
            name='TermsAndConditions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TermsAndConditions_title', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_title_desc', models.TextField(blank=True, max_length=5000, null=True)),
                ('TermsAndConditions_subtitle1', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_desc1', models.TextField(blank=True, max_length=5000, null=True)),
                ('TermsAndConditions_document1', models.FileField(blank=True, null=True, upload_to='core_app/terms_and_conditions/documents', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'pdf'])])),
                ('TermsAndConditions_subtitle2', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_desc2', models.TextField(blank=True, max_length=5000, null=True)),
                ('TermsAndConditions_document2', models.FileField(blank=True, null=True, upload_to='core_app/terms_and_conditions/documents', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'pdf'])])),
                ('TermsAndConditions_subtitle3', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_desc3', models.TextField(blank=True, max_length=5000, null=True)),
                ('TermsAndConditions_document3', models.FileField(blank=True, null=True, upload_to='core_app/terms_and_conditions/documents', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'pdf'])])),
                ('TermsAndConditions_subtitle4', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_desc4', models.TextField(blank=True, max_length=5000, null=True)),
                ('TermsAndConditions_document4', models.FileField(blank=True, null=True, upload_to='core_app/terms_and_conditions/documents', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'pdf'])])),
                ('TermsAndConditions_subtitle5', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_desc5', models.TextField(blank=True, max_length=5000, null=True)),
                ('TermsAndConditions_document5', models.FileField(blank=True, null=True, upload_to='core_app/terms_and_conditions/documents', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'pdf'])])),
                ('TermsAndConditions_image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/terms_and_conditions/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('TermsAndConditions_url', models.CharField(blank=True, max_length=500, null=True)),
                ('TermsAndConditions_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('TermsAndConditions_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=30)),
                ('TermsAndConditions_CreationDate', models.DateField(auto_now_add=True)),
                ('TermsAndConditions_LastUpdateDate', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Terms and Conditions',
                'db_table': 'TERMS_AND_CONDITIONS',
            },
        ),
        migrations.CreateModel(
            name='Testimonials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Testimonials_Title', models.TextField()),
                ('Testimonials_Description', models.TextField()),
                ('Testimonials_Description1', models.TextField(blank=True, null=True)),
                ('Testimonials_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Testimonials_Image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Testimonials/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Testimonials_InternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('Testimonials_ExternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('Testimonials_CreatedDate', models.DateField(auto_now_add=True)),
                ('Testimonials_UpdatedDate', models.DateField(auto_now=True, null=True)),
                ('Testimonials_Author', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Testimonials',
                'db_table': 'TESTIMONIALS',
            },
        ),
        migrations.CreateModel(
            name='TestimonialsMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TestimonialsMessages_PersonName', models.TextField(blank=True, null=True)),
                ('TestimonialsMessages_PersonDesignation', models.TextField(blank=True, null=True)),
                ('TestimonialsMessages_Title', models.TextField(blank=True, null=True)),
                ('TestimonialsMessages_Description', models.TextField(blank=True, null=True)),
                ('TestimonialsMessages_Description1', models.TextField(blank=True, null=True)),
                ('TestimonialsMessages_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('TestimonialsMessages_Image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/TestimonialsMessages/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('TestimonialsMessages_InternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('TestimonialsMessages_ExternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('TestimonialsMessages_CreatedDate', models.DateField(auto_now_add=True)),
                ('TestimonialsMessages_UpdatedDate', models.DateField(auto_now=True, null=True)),
                ('TestimonialsMessages_Author', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Testimonials Messages ',
                'db_table': 'TESTIMONIALS_MESSAGES',
            },
        ),
        migrations.CreateModel(
            name='Tools',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Tools_Name', models.CharField(max_length=100)),
                ('Tools_Description', models.TextField(blank=True, max_length=1000, null=True)),
                ('Tools_InternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('Tools_ExternalURL', models.CharField(blank=True, max_length=500, null=True)),
                ('Tools_ThumbnailImage', models.FileField(blank=True, null=True, upload_to='core_app/tools/thunbnail_img/')),
                ('Tools_Image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/tools/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Tools_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('Tools_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('Tools_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=30)),
                ('Tools_CreationDate', models.DateField(auto_now_add=True)),
                ('Tools_LastUpdateDate', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'List of All Tools',
                'db_table': 'TOOLS',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='UAIndiaProgramme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UAIndiaProgramme_Title', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Title_Description', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Title_Image', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/UAIndiaProgramme/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('UAIndiaProgramme_Subtitle1', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Description1', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Image1', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/UAIndiaProgramme/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('UAIndiaProgramme_Subtitle2', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Description2', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Image2', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/UAIndiaProgramme/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('UAIndiaProgramme_Subtitle3', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Description3', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Image3', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/UAIndiaProgramme/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('UAIndiaProgramme_Subtitle4', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Description4', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Image4', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/UAIndiaProgramme/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('UAIndiaProgramme_Subtitle5', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Description5', models.TextField(blank=True, null=True)),
                ('UAIndiaProgramme_Image5', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/UAIndiaProgramme/image/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG'])])),
                ('UAIndiaProgramme_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('UAIndiaProgramme_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('UAIndiaProgramme_CreatedDate', models.DateField(auto_now_add=True)),
                ('UAIndiaProgramme_UpdatedDate', models.DateField(auto_now=True)),
                ('UAIndiaProgramme_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'UA India Programme',
                'db_table': 'UA_INDIA_PROGRAMME',
            },
        ),
        migrations.CreateModel(
            name='UniversalAcceptance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UniversalAcceptance_title', models.CharField(max_length=100)),
                ('UniversalAcceptance_title_desc', models.TextField(blank=True, max_length=1000, null=True)),
                ('UniversalAcceptance_subtitle1', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_desc1', models.TextField(blank=True, max_length=1000, null=True)),
                ('UniversalAcceptance_subtitle2', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_desc2', models.TextField(blank=True, max_length=1000, null=True)),
                ('UniversalAcceptance_subtitle3', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_desc3', models.TextField(blank=True, max_length=1000, null=True)),
                ('UniversalAcceptance_subtitle4', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_desc4', models.TextField(blank=True, max_length=1000, null=True)),
                ('UniversalAcceptance_subtitle5', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_desc5', models.TextField(blank=True, max_length=1000, null=True)),
                ('UniversalAcceptance_image1', models.FileField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/privacy_policy/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg', 'webp'])])),
                ('UniversalAcceptance_image2', models.FileField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/privacy_policy/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg', 'webp'])])),
                ('UniversalAcceptance_image3', models.FileField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/privacy_policy/img', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg', 'webp'])])),
                ('UniversalAcceptance_url', models.CharField(blank=True, max_length=500, null=True)),
                ('UniversalAcceptance_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('UniversalAcceptance_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=30)),
                ('UniversalAcceptance_CreationDate', models.DateField(auto_now_add=True)),
                ('UniversalAcceptance_LastUpdateDate', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Universal Acceptance',
                'db_table': 'UNIVERSAL_ACCEPTANCE',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Document_Name', models.CharField(max_length=800)),
                ('Document_Description', models.TextField()),
                ('Document_CreationDate', models.DateField(auto_now_add=True)),
                ('Document_LastUpdatedDate', models.DateField(auto_now=True)),
                ('Document_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('Document_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('Document_LanguageType', models.CharField(max_length=500)),
                ('Document_PublishedStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Document_Slug', models.SlugField(blank=True, max_length=255, null=True)),
                ('Document_Thumbnail', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Document/Thumbnail', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Document_DocumentFile', models.FileField(blank=True, null=True, upload_to='core_app/Document/DocumentFile', validators=[django.core.validators.FileExtensionValidator(['pdf', 'zip', 'csv', 'xls', 'ppt', 'html'])])),
                ('Document_FileSize', models.CharField(max_length=30)),
                ('Document_Count', models.IntegerField()),
                ('Document_Type', models.CharField(max_length=30)),
                ('DocumentUASG_url', models.CharField(blank=True, max_length=500, null=True)),
                ('Document_CategoryType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.documentcategory')),
            ],
            options={
                'verbose_name_plural': 'Document',
                'db_table': 'DOCUMENT',
            },
        ),
        migrations.CreateModel(
            name='DocumentWithoutTrans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Document_Name', models.CharField(max_length=800)),
                ('Document_Description', models.TextField()),
                ('Document_CreationDate', models.DateField(auto_now_add=True)),
                ('Document_LastUpdatedDate', models.DateField(auto_now=True)),
                ('Document_Author', models.CharField(blank=True, max_length=200, null=True)),
                ('Document_LanguageType', models.CharField(max_length=500)),
                ('Document_PublishedStatus', models.CharField(choices=[('Published', 'PUBLISHED'), ('Unpublished', 'UNPUBLISHED')], default='Unpublished', max_length=20)),
                ('Document_Slug', models.SlugField(blank=True, max_length=255, null=True)),
                ('Document_Thumbnail', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/Document/Thumbnail', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('Document_DocumentFile', models.FileField(blank=True, null=True, upload_to='core_app/Document/DocumentFile', validators=[django.core.validators.FileExtensionValidator(['pdf', 'zip', 'csv', 'xls', 'ppt', 'html'])])),
                ('Document_FileSize', models.CharField(max_length=30)),
                ('Document_Count', models.IntegerField()),
                ('Document_Type', models.CharField(max_length=30)),
                ('DocumentUASGTrans_url', models.CharField(blank=True, max_length=500, null=True)),
                ('Document_CategoryType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.documentcategorywithouttrans')),
            ],
            options={
                'verbose_name_plural': 'Document Without Translation',
                'ordering': ['Document_Name'],
            },
        ),
        migrations.CreateModel(
            name='Faqs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Faqs_Ques', models.TextField()),
                ('Faqs_Ans', models.TextField()),
                ('Faqs_CreationDate', models.DateField(auto_now_add=True)),
                ('Faqs_LastUpdateDate', models.DateField(auto_now=True, null=True)),
                ('Faqs_PublishStatus', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Faqs_Content_Author', models.CharField(blank=True, max_length=100, null=True)),
                ('Faqs_Content_Modifier', models.CharField(blank=True, max_length=100, null=True)),
                ('Faqs_Category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.faqcategory')),
            ],
            options={
                'verbose_name_plural': 'Frequently Asked Questions',
                'db_table': 'FAQS',
            },
        ),
        migrations.CreateModel(
            name='GalleryVideos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Gallery_Video_Label', models.CharField(max_length=500)),
                ('Gallery_Video_Link', models.CharField(max_length=500)),
                ('Gallery_Video_Creation_Date', models.DateField(auto_now_add=True)),
                ('Gallery_Video_Last_Updated_Date', models.DateField(auto_now=True)),
                ('Gallery_Video_Publish_Status', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('Gallery_Heading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.galleryheadings')),
            ],
            options={
                'verbose_name_plural': 'Gallery Videos',
                'db_table': 'Gallery_Videos',
            },
        ),
        migrations.CreateModel(
            name='IDNReadyWebsites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDNReadyWebsites_Title', models.CharField(max_length=100)),
                ('IDNReadyWebsites_Logo', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', upload_to='core_app/Idn_websites/', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('IDNReadyWebsites_Creation_Date', models.DateField(auto_now_add=True)),
                ('IDNReadyWebsites_Last_Updated_Date', models.DateField(auto_now=True)),
                ('IDNReadyWebsites_Publish_Status', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('IDNReadyWebsites_Category', models.ManyToManyField(to='core_app.idnreadywebsitescategory')),
            ],
            options={
                'verbose_name_plural': 'List of IDN Ready Websites',
                'db_table': 'IDN_WEBSITES',
            },
        ),
        migrations.CreateModel(
            name='IDNReadyWebsitesLangugeURLMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IDNReadyWebsites_url', models.CharField(max_length=500)),
                ('IDNReadyWebsites_LangURLMapping_Creation_Date', models.DateField(auto_now_add=True)),
                ('IDNReadyWebsites_LangURLMapping_Last_Updated_Date', models.DateField(auto_now=True)),
                ('IDNReadyWebsites_LangURLMapping_Publish_Status', models.CharField(choices=[('Published', 'Published'), ('Unpublished', 'Unpublished')], default='Unpublished', max_length=20)),
                ('IDNReadyWebsites', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.idnreadywebsites')),
                ('IDNReadyWebsites_lang', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.idnreadywebsiteslanguages')),
            ],
            options={
                'verbose_name_plural': 'List of IDN Ready Websites Language Url Mapping',
                'db_table': 'IDN_WEBSITES_LANGUAGE_URL_MAPPING',
            },
        ),
        migrations.CreateModel(
            name='IDNRequestForUserWebsites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitter_name', models.CharField(max_length=100)),
                ('IDN_Email', models.CharField(max_length=500)),
                ('IDN_English_Domain', models.CharField(max_length=255, unique=True)),
                ('IDN_URLS', models.JSONField()),
                ('need_assistance', models.BooleanField(blank=True, default=False, null=True)),
                ('assist_langs', models.CharField(blank=True, max_length=500, null=True)),
                ('assist_remark', models.CharField(blank=True, max_length=500, null=True)),
                ('IDN_Created_Date', models.DateField(auto_now_add=True)),
                ('IDN_Last_Updated_Date', models.DateField(auto_now=True)),
                ('IDN_Approve_Category', models.CharField(blank=True, choices=[('APPROVED', 'APPROVED'), ('NOT-APPROVED', 'NOT-APPROVED')], default='NOT-APPROVED', max_length=20, null=True)),
                ('IDN_Category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core_app.idnrequestforuserwebsitescategories', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'IDN Request For User Websites',
                'verbose_name_plural': 'IDN Request For User Websites',
            },
        ),
        migrations.CreateModel(
            name='SOPTechnologyDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SOPTechnologyDocument_Name', models.CharField(max_length=800)),
                ('SOPTechnologyDocument_Description', models.TextField()),
                ('SOPTechnologyDocument_CreationDate', models.DateField(auto_now_add=True)),
                ('SOPTechnologyDocument_LastUpdatedDate', models.DateField(auto_now=True)),
                ('SOPTechnologyDocument_LastUpdatedSOPDate', models.DateField()),
                ('SOPTechnologyDocument_Author', models.CharField(blank=True, max_length=200, null=True)),
                ('SOPTechnologyDocument_LanguageType', models.CharField(blank=True, max_length=500, null=True)),
                ('SOPTechnologyDocument_PublishedStatus', models.CharField(choices=[('Published', 'PUBLISHED'), ('Unpublished', 'UNPUBLISHED')], default='Unpublished', max_length=20)),
                ('SOPTechnologyDocument_Slug', models.SlugField(blank=True, max_length=255, null=True)),
                ('SOPTechnologyDocument_Thumbnail', models.ImageField(blank=True, help_text='Maximum file size allowed is 5Mb', null=True, upload_to='core_app/SOPTechnologyDocument/Thumbnail', validators=[core_app.validate.validate_image, django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'png', 'JPEG', 'svg'])])),
                ('SOPTechnologyDocument_DocumentFile', models.FileField(blank=True, null=True, upload_to='core_app/SOPTechnologyDocument/DocumentFile', validators=[django.core.validators.FileExtensionValidator(['pdf', 'zip', 'csv', 'xls', 'ppt', 'html'])])),
                ('SOPTechnologyDocument_FileSize', models.CharField(blank=True, max_length=30, null=True)),
                ('SOPTechnologyDocument_Count', models.IntegerField(blank=True, null=True)),
                ('SOPTechnologyDocument_Type', models.CharField(blank=True, max_length=30, null=True)),
                ('SOPTechnologyDocument_url', models.CharField(blank=True, max_length=500, null=True)),
                ('SOPTechnologyDocument_CategoryType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.soptechnologycategory')),
            ],
            options={
                'verbose_name_plural': 'SOP Technology Document',
                'ordering': ['SOPTechnologyDocument_Name'],
            },
        ),
        migrations.CreateModel(
            name='SOPDownloadCounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DownloadCounter', models.IntegerField()),
                ('SOPTechnologyDocument_Obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.soptechnologydocument')),
            ],
            options={
                'verbose_name_plural': 'SOP Download Counter',
            },
        ),
        migrations.CreateModel(
            name='UserFeedbackData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Feedback_FirstName', models.CharField(max_length=30)),
                ('Feedback_Email', models.CharField(max_length=300)),
                ('Feedback_Message', models.TextField(max_length=500)),
                ('Feedback_Submission_Date', models.DateField(auto_now_add=True, null=True)),
                ('Feedback_Related_To', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core_app.feedbackcategory')),
            ],
            options={
                'verbose_name_plural': 'User Feedback Data',
                'db_table': 'UserFeedbackData',
            },
        ),
    ]
